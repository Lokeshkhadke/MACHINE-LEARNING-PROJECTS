# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bRJwz4M0YNroK80M4snXzBBMmtZl_njE

The Heart Disease Prediction project focuses on predicting whether a person has heart disease based on a set of health-related features using Logistic Regression, a classification machine learning model. It demonstrates the typical workflow of a data science project, from data collection and processing to model training, evaluation, and prediction.this is a bineary classification problem.

Importing the necessary libaries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

# loading the csv data to a Pandas DataFrame
heart_data = pd.read_csv('/content/heart_disease_data.csv')

# print first 5 rows of the dataset
heart_data.head()

# print last 5 rows of the dataset
heart_data.tail()

# number of rows and columns in the dataset
heart_data.shape

# getting some info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking the distribution of Target Variable
heart_data['target'].value_counts()

"""1 --> Defective Heart

0 --> Healthy Heart

Splitting the Features and Target
"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the Data into Training data & Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""**Model Training**

**Logistic Regression**
"""

model = LogisticRegression()

# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

"""**Model Evaluation**

**Accuracy Score **
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

"""**Building a Predictive System**

Input Data: A sample input is provided to predict whether the person has heart disease. This input must match the feature format used for training the model.

Prediction is made using the trained model and reshaped input data.
The result is interpreted and displayed: if the prediction is 0, the person does not have heart disease; otherwise, they do.
"""

input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

"""**Conclusion**

This heart disease prediction project uses **Logistic Regression** to classify whether a person has a healthy heart or a defective one, based on various health-related features. The goal of this project is not just to build a model but to create a tool that can help doctors and healthcare professionals make better decisions in diagnosing heart disease, which is a major cause of death worldwide.

However, it's important to recognize that predicting heart disease is a **serious matter**. In real-life situations, we want our model to be **extremely accurate**, as even small errors could lead to wrong diagnoses and potentially dangerous consequences. While this model can give us a general idea, itâ€™s crucial that the results be validated and backed up by healthcare professionals.

Moreover, the model's accuracy might vary based on the data it was trained on. **Real-world data** can be more complex, and other factors not included in this dataset could also affect heart health. Therefore, while machine learning models like Logistic Regression can be helpful, they should be used as a **support tool**, not a replacement for medical expertise.

In simpler terms, while the model does a good job of predicting heart disease, it should never be the final authority. The consequences of mistakes in healthcare can be severe, so the results should always be used alongside advice from doctors and other medical professionals.

In summary, this project demonstrates how machine learning can be used to aid in heart disease prediction, but we must always approach it with caution and understand its limitations. For any **life-threatening** situation like heart disease, **accuracy and careful judgment** are paramount.
"""